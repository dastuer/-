// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/13/2021 23:04:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Carrier_Generator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Carrier_Generator_vlg_sample_tst(
	clk,
	reset_n,
	sampler_tx
);
input  clk;
input  reset_n;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset_n)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Carrier_Generator_vlg_check_tst (
	blank_DA_n,
	clk_DA,
	dataout,
	sync_DA_n,
	sampler_rx
);
input  blank_DA_n;
input  clk_DA;
input [7:0] dataout;
input  sync_DA_n;
input sampler_rx;

reg  blank_DA_n_expected;
reg  clk_DA_expected;
reg [7:0] dataout_expected;
reg  sync_DA_n_expected;

reg  blank_DA_n_prev;
reg  clk_DA_prev;
reg [7:0] dataout_prev;
reg  sync_DA_n_prev;

reg  blank_DA_n_expected_prev;
reg  clk_DA_expected_prev;
reg [7:0] dataout_expected_prev;
reg  sync_DA_n_expected_prev;

reg  last_blank_DA_n_exp;
reg  last_clk_DA_exp;
reg [7:0] last_dataout_exp;
reg  last_sync_DA_n_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	blank_DA_n_prev = blank_DA_n;
	clk_DA_prev = clk_DA;
	dataout_prev = dataout;
	sync_DA_n_prev = sync_DA_n;
end

// update expected /o prevs

always @(trigger)
begin
	blank_DA_n_expected_prev = blank_DA_n_expected;
	clk_DA_expected_prev = clk_DA_expected;
	dataout_expected_prev = dataout_expected;
	sync_DA_n_expected_prev = sync_DA_n_expected;
end



// expected blank_DA_n
initial
begin
	blank_DA_n_expected = 1'bX;
end 

// expected clk_DA
initial
begin
	clk_DA_expected = 1'bX;
end 
// expected dataout[ 7 ]
initial
begin
	dataout_expected[7] = 1'bX;
end 
// expected dataout[ 6 ]
initial
begin
	dataout_expected[6] = 1'bX;
end 
// expected dataout[ 5 ]
initial
begin
	dataout_expected[5] = 1'bX;
end 
// expected dataout[ 4 ]
initial
begin
	dataout_expected[4] = 1'bX;
end 
// expected dataout[ 3 ]
initial
begin
	dataout_expected[3] = 1'bX;
end 
// expected dataout[ 2 ]
initial
begin
	dataout_expected[2] = 1'bX;
end 
// expected dataout[ 1 ]
initial
begin
	dataout_expected[1] = 1'bX;
end 
// expected dataout[ 0 ]
initial
begin
	dataout_expected[0] = 1'bX;
end 

// expected sync_DA_n
initial
begin
	sync_DA_n_expected = 1'bX;
end 
// generate trigger
always @(blank_DA_n_expected or blank_DA_n or clk_DA_expected or clk_DA or dataout_expected or dataout or sync_DA_n_expected or sync_DA_n)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected blank_DA_n = %b | expected clk_DA = %b | expected dataout = %b | expected sync_DA_n = %b | ",blank_DA_n_expected_prev,clk_DA_expected_prev,dataout_expected_prev,sync_DA_n_expected_prev);
	$display("| real blank_DA_n = %b | real clk_DA = %b | real dataout = %b | real sync_DA_n = %b | ",blank_DA_n_prev,clk_DA_prev,dataout_prev,sync_DA_n_prev);
`endif
	if (
		( blank_DA_n_expected_prev !== 1'bx ) && ( blank_DA_n_prev !== blank_DA_n_expected_prev )
		&& ((blank_DA_n_expected_prev !== last_blank_DA_n_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port blank_DA_n :: @time = %t",  $realtime);
		$display ("     Expected value = %b", blank_DA_n_expected_prev);
		$display ("     Real value = %b", blank_DA_n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_blank_DA_n_exp = blank_DA_n_expected_prev;
	end
	if (
		( clk_DA_expected_prev !== 1'bx ) && ( clk_DA_prev !== clk_DA_expected_prev )
		&& ((clk_DA_expected_prev !== last_clk_DA_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_DA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_DA_expected_prev);
		$display ("     Real value = %b", clk_DA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clk_DA_exp = clk_DA_expected_prev;
	end
	if (
		( dataout_expected_prev[0] !== 1'bx ) && ( dataout_prev[0] !== dataout_expected_prev[0] )
		&& ((dataout_expected_prev[0] !== last_dataout_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dataout_exp[0] = dataout_expected_prev[0];
	end
	if (
		( dataout_expected_prev[1] !== 1'bx ) && ( dataout_prev[1] !== dataout_expected_prev[1] )
		&& ((dataout_expected_prev[1] !== last_dataout_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dataout_exp[1] = dataout_expected_prev[1];
	end
	if (
		( dataout_expected_prev[2] !== 1'bx ) && ( dataout_prev[2] !== dataout_expected_prev[2] )
		&& ((dataout_expected_prev[2] !== last_dataout_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dataout_exp[2] = dataout_expected_prev[2];
	end
	if (
		( dataout_expected_prev[3] !== 1'bx ) && ( dataout_prev[3] !== dataout_expected_prev[3] )
		&& ((dataout_expected_prev[3] !== last_dataout_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dataout_exp[3] = dataout_expected_prev[3];
	end
	if (
		( dataout_expected_prev[4] !== 1'bx ) && ( dataout_prev[4] !== dataout_expected_prev[4] )
		&& ((dataout_expected_prev[4] !== last_dataout_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dataout_exp[4] = dataout_expected_prev[4];
	end
	if (
		( dataout_expected_prev[5] !== 1'bx ) && ( dataout_prev[5] !== dataout_expected_prev[5] )
		&& ((dataout_expected_prev[5] !== last_dataout_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dataout_exp[5] = dataout_expected_prev[5];
	end
	if (
		( dataout_expected_prev[6] !== 1'bx ) && ( dataout_prev[6] !== dataout_expected_prev[6] )
		&& ((dataout_expected_prev[6] !== last_dataout_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dataout_exp[6] = dataout_expected_prev[6];
	end
	if (
		( dataout_expected_prev[7] !== 1'bx ) && ( dataout_prev[7] !== dataout_expected_prev[7] )
		&& ((dataout_expected_prev[7] !== last_dataout_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dataout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dataout_expected_prev);
		$display ("     Real value = %b", dataout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dataout_exp[7] = dataout_expected_prev[7];
	end
	if (
		( sync_DA_n_expected_prev !== 1'bx ) && ( sync_DA_n_prev !== sync_DA_n_expected_prev )
		&& ((sync_DA_n_expected_prev !== last_sync_DA_n_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sync_DA_n :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sync_DA_n_expected_prev);
		$display ("     Real value = %b", sync_DA_n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sync_DA_n_exp = sync_DA_n_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Carrier_Generator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset_n;
// wires                                               
wire blank_DA_n;
wire clk_DA;
wire [7:0] dataout;
wire sync_DA_n;

wire sampler;                             

// assign statements (if any)                          
Carrier_Generator i1 (
// port map - connection between master ports and signals/registers   
	.blank_DA_n(blank_DA_n),
	.clk(clk),
	.clk_DA(clk_DA),
	.dataout(dataout),
	.reset_n(reset_n),
	.sync_DA_n(sync_DA_n)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset_n
initial
begin
	reset_n = 1'b0;
	reset_n = #50000 1'b1;
end 

Carrier_Generator_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset_n(reset_n),
	.sampler_tx(sampler)
);

Carrier_Generator_vlg_check_tst tb_out(
	.blank_DA_n(blank_DA_n),
	.clk_DA(clk_DA),
	.dataout(dataout),
	.sync_DA_n(sync_DA_n),
	.sampler_rx(sampler)
);
endmodule

